// Inclusión de librerías

// Se incluye la librería para manejar la conectividad WiFi
#include <WiFi.h>
// Se incluye la librería para realizar peticiones HTTP
#include <HTTPClient.h>
// Se incluye la librería para manejar datos JSON
#include <ArduinoJson.h>
// Se incluye la librería para el sensor de temperatura y humedad DHT11
#include <DHT.h>

// Definiciones y configuración del sensor DHT11

// Se define el pin14 del ESP32 para conectar el sensor DHT11
#define DHTPIN 14
// Se especifica que se utilizará el modelo DHT11
#define DHTTYPE DHT11
// Se crea una instancia del sensor DHT11
DHT dht(DHTPIN, DHTTYPE);

// Definición de pines para otros componentes

// Se define el pin33 para el color rojo del LED RGB
const int redPin = 33;
// Se define el pin25 para el color verde del LED RGB
const int greenPin = 25;
// Se define el pin26 para el color azul del LED RGB
const int bluePin = 26;
// Se define el pin5 para el primer interruptor del dip switch
const int dipSwitch1Pin = 5;
// Se define el pin27 para el segundo interruptor del dip switch
const int dipSwitch2Pin = 27;
// Se define el pin19 para el KY-010 Photo Interrupter Module
const int photoInterrupterPin = 19;
// Se define el pin 18 para el KY-031 Knock Sensor Module
const int knockSensorPin = 18;

// Variables globales
// Estado inicial del LED para el sensor KY-031 Knock Sensor Module
bool ledState = false;

// Credenciales de WiFi y URL de la API
// Se definen las credenciales de Wifi
const char* ssid = "Tec-Contingencia";
const char* password = "";
// Se define la URL del endpoint de la API a la que se enviarán los datos
const char* apiEndpoint = "https://automatic-giggle-jj5v456g7pv5hjqwv-5000.app.github.dev/sensor_data";

// Se inicia la comunicación Serial y se conecta a la red WiFi
void setupWifi()
{
  // Inicia la comunicación serial con serial entre el ESP32 y la computadora
  Serial.begin(9600);
  // Se imprime el menaje "Connecting to WiFi" para indicar que el proceso de conexión WiFi está comenzando
  Serial.print("Connecting to WiFi");
  // Se intenta conectar el dispositivo a la red WiFi especificada
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(100);
    Serial.print(".");
  }
  Serial.print(" Connected: ");
  // Se imprime la dirección IP local asignada al dispositivo por la red WiFi
  Serial.println(WiFi.localIP());
}

// Se configuran los pines de los sensores como entradas o salidas y se inicializa el sensor DHT11
void setupSensors()
{
  pinMode(redPin, OUTPUT);
  pinMode(greenPin, OUTPUT);
  pinMode(bluePin, OUTPUT);
  pinMode(dipSwitch1Pin, INPUT_PULLUP);
  pinMode(dipSwitch2Pin, INPUT_PULLUP);
  pinMode(photoInterrupterPin, INPUT);
  pinMode(knockSensorPin, INPUT);
  // Se inicializa el DHT11
  dht.begin(); 
}

void setup()
{
  setupWifi();
  setupSensors();
}

void loop()
{
  // Leer y mostrar datos del DHT11
  float h = dht.readHumidity();
  float t = dht.readTemperature();

  // Imprime el estado de los switches y sensores para depuración
  Serial.print("Dip Switch 1: ");
  Serial.print(digitalRead(dipSwitch1Pin));
  Serial.print(", Dip Switch 2: ");
  Serial.print(digitalRead(dipSwitch2Pin));
  Serial.print(", Photo Interrupter: ");
  Serial.print(digitalRead(photoInterrupterPin));
  Serial.print(", Knock Sensor: ");
  Serial.println(digitalRead(knockSensorPin));
  Serial.print("Humidity: ");
  Serial.print(h);
  Serial.print("%, Temp: ");
  Serial.print(t);
  Serial.println("C");

  int openValue = 0;
  int lightValue = 0;  // Nuevo valor para almacenar el estado del LED

  if (digitalRead(dipSwitch1Pin) == HIGH && digitalRead(dipSwitch2Pin) == LOW)
  {
    // Primer switch activado y segundo apagado
    if (digitalRead(photoInterrupterPin) == HIGH)
    {
      setColor(255, 255, 255); // Blanco
      openValue = 1;  // Cambiado para almacenar el estado del Photo Interrupter
    }
    else
    {
      setColor(255, 0, 0); // Rojo
      openValue = 0;
    }
  }
  else if (digitalRead(dipSwitch2Pin) == HIGH && digitalRead(dipSwitch1Pin) == LOW)
  {
    // Segundo switch activado y primero apagado
    if (digitalRead(knockSensorPin) == HIGH)
    {
      ledState = !ledState; // Cambia el estado del LED
      delay(100); // Pequeño retardo para evitar múltiples disparos
    }
    setColor(ledState ? 255 : 0, ledState ? 255 : 0, ledState ? 255 : 0); // Blanco o apagado
    lightValue = ledState ? 1 : 0;  // Almacenar el estado del LED
  }
  else
  {
    setColor(0, 0, 0); // Ambos switches apagados o ambos activados
  }

  sendData(t, h, openValue, lightValue);  // Se agrega lightValue al enviar datos
  delay(5000); // Retardo de 5000 milisegundos para enviar datos cada 5 segundos
}

void setColor(int red, int green, int blue)
{
  analogWrite(redPin, red);
  analogWrite(greenPin, green);
  analogWrite(bluePin, blue);
}

// Se prepara y envía una petición HTTP POST al API con los datos de los sensores en formato JSON

// Esta función toma como parámetros "temperature (float)", "humidity (float)", "open (int)", "light(int)"
void sendData(float temperature, float humidity, int open, int light)
{
  // Envía un mensaje a la consola serial para indicar que el proceso de envío de datos está comenzando
  Serial.print("Sending data to API: ");

  // Se crea un objeto "http", que se utilizará para manejar la conexión y las peticiones HTTP
  HTTPClient http;
  // Inicia una conexión HTTP al endpoint de la API
  http.begin(apiEndpoint);
  // Añade un encabezado HTTP a la petición, especificando que el tipo de dato es JSON
  http.addHeader("Content-Type", "application/json");

  // Se crea una documento JSON utilizando la biblioteca ArduinoKson, con un tamaño máximo de 200 bytes
  DynamicJsonDocument doc(200);

  // Añade la temperatura al documento JSON
  doc["temperature"] = temperature;
  // Añade la humedad al documento JSON
  doc["humidity"] = humidity;
  // Añade el estado del sensor "open" al documento JSON
  doc["open"] = open;
  // Añade el estado del LED al documento JSON
  doc["light"] = light;


  doc["date_time"] = "2023-11-27 12:00:00";  // Modifica esto con la fecha y hora actual

  // Crea una variable tipo "String" para almacenar la versión serializada del documento JSON
  String json;
  // Convierte el documento JSON en una cadena de texto y lo almacena en "json"
  serializeJson(doc, json);

  // Se envía una petición POST con el contenido JSON al servidor 
  int httpResponseCode = http.POST(json);
  // Si el código de respuesta es positivo (se indica el éxito en la petición)
  if (httpResponseCode > 0)
  {
    // 
    Serial.print("HTTP Response code: ");
    Serial.println(httpResponseCode);
    String responseString = http.getString();
    Serial.println("Received response: " + responseString);
  }
  else
  {
    // Print the error code
    Serial.print("Error code: ");
    Serial.println(httpResponseCode);
  }
  http.end();
}
